class Solution:
    def getLastMoment(self, n: int, left: List[int], right: List[int]) -> int:
        """
        plank of length n
        
        right, left moving ants
        
        if ants collide they change direction and walk back
        
        if ant walks to end it falls
        
        return time where last ant falls
        
        
        left = [4, 5, 6, 7]
        right = [0, 1, 2, 3]
        
        
        T = 0 => [0, 1, 2, 3], [4, 5], [6, 7, 8, 9 10]
        
        T = 0.5 => [0.5, 1.5, 2.5, 3.5], [4.5, 4.5], [5.5, 6.5, 7.5, 8.5, 9.5]
        
                    [0.5, 1.5, 2.5] [3.5, 4.5] [4.5, 5.5], [6.5, 7.5, 8.5, 9.5]
                    
        T = 1 => [1, 2, 3] [4, 4], [5, 5], [6, 7, 8, 9]
        
        T =      [1, 2] [3, 4] [4, 5] [5, 6] [7, 8, 9]
        
        T => 1.5 => [1.5, 2.5] [3.5, 3.5] [4.5, 4.5] [5.5, 5.5] [6.5, 7.5, 8.5]
        
                   [1.5] [2.5, 3.5] [3.5, 4.5] [4.5, 5.5] [5.5, 6.5] [7.5, 8.5]
                   
        T = 2 => [2] [3, 3] [4, 4] [5, 5] [6, 6] [7, 8]
        
                [2, 3] [3, 4] [4, 5] [5, 6] [6, 7] [8]
                
        T = 2.5 => [2.5, 2.5] [3.5, 3.5] [4.5, 4.5] [5.5, 5.5] [6.5, 6.5] [7.5]
        
        maxim = 5
        
                [2. 5, 3.5] [3. 5, 4.5] [4.5, 5.5] [5.5, 6.5] [6.5, 7.5]
                
        T = 3 [3, 3] [4, 4] [5, 5] [6, 6] [7, 7]
        
        maxim = 6
        
                [3, 4] [4, 5] [5, 6] [6, 7]
                
        T = 3.5 = [3.5, 3.5] [4.5, 4.5] [5.5, 5.5] [6.5, 6.5]
        
        maxim = 7
        
        T = [3.5, 4.5] [4.5, 5.5] [5.5, 6.5]
        
        T = 4 -> [4, 4] [5, 5] [6, 6]
        
        maxim = 8
                [4, 5] [5, 6]
                
        T = 4.5 => [4.5, 4.5] [5.5, 5.5]
        
        maxim = 9
                [4.5, 5.5]
                
        T = 5 => [5, 5]
        
        maxim = 10
        
        => <= => <= => <=
        
        1  3 4  8  9 12
        
        
        [1, 4, 9]
        [3, 8, 12]
        
        
        [1, 3] [4, 8] [9, 12]
        
        T = 1 = [2, 2] [5, 7] [10, 11]
        
        maxim = 3
        
                [2] [5, 7] [10, 11]
                
        T = 1.5
        
            [2.5] [5.5, 6.5] [10.5, 10.5]
            
        maxim = 6
        
            [2. 5] [5.5, 6.5] [10.5]
            
            
        T = 2
            [3] [6, 6] [10]
            
            [3, 6] [6, 10]
            
        T = 3.5
            [4.5, 4.5] [7.5, 8.5]
            
        maxim = 8
        
            [4.5] [7.5, 8.5]
            
        T = 4
            [5] [8, 8]
            
        maxim = 11
        
        150
            65
            85
        
            [5, 8]
            
        T = 5.5
            [6.5, 6.5]
            
        maxim = 12, 
        
        maxim = 
        
        
        [1, 3, 7]
        []
        """
        left.sort(reverse = True)
        right.sort()
        maxim = 0
        
        if left:
            maxim = max(left[0], maxim)
        
        if right:
            maxim = max(n - right[0], maxim)
            
        if left and right:
            maxim = max(maxim, left[0] - right[0])
        
        
        return maxim